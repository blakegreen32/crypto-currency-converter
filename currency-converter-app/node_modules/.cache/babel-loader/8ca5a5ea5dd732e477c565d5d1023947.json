{"ast":null,"code":"var _jsxFileName = \"/Users/blakegreen/Desktop/currency-converter/currency-converter-app/src/components/Converter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Converter = () => {\n  _s();\n\n  const [response, setResponse] = useState([]);\n\n  const fetchConversions = async value => {\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${value}&vs_currencies=btc,eth,ltc,xrp`);\n      const json = await response.json();\n      setResponse(json);\n      console.log(json);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Bitcoin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Ethereum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Litecoin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Ripple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: response.length > 0 ? Object.keys(response[0]).map(key => {\n          return /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 23\n            }, this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"No Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: response.map((val, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: Object.keys(val).map(key => {\n          return /*#__PURE__*/_jsxDEV(\"td\", {\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Converter, \"JJeyDGiZMXAMlJWV0msHTLkVjbk=\");\n\n_c = Converter;\nexport default Converter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"sources":["/Users/blakegreen/Desktop/currency-converter/currency-converter-app/src/components/Converter.js"],"names":["React","useState","useEffect","Converter","response","setResponse","fetchConversions","value","fetch","json","console","log","err","e","target","innerText","length","Object","keys","map","key","val","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;;AAGA,QAAMK,gBAAgB,GAAG,MAAOC,KAAP,IAAiB;AACxC,QAAI;AACF,YAAMH,QAAQ,GAAG,MAAMI,KAAK,CAAE,qDAAoDD,KAAM,gCAA5D,CAA5B;AACA,YAAME,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;AACAJ,MAAAA,WAAW,CAACI,IAAD,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KALD,CAKE,OAAOG,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF,GATD;;AAWA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAI,QAAA,OAAO,EAAGC,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,OAAO,EAAGF,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAI,QAAA,OAAO,EAAGF,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAI,QAAA,OAAO,EAAGF,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAA,6BACE;AAAA,kBACCX,QAAQ,CAACY,MAAT,GAAkB,CAAlB,GACOC,MAAM,CAACC,IAAP,CAAYd,QAAQ,CAAC,CAAD,CAApB,EAAyBe,GAAzB,CAA8BC,GAAD,IAAS;AACpC,8BACE;AAAA,mCACE;AAAA,wBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA;AADF,aAASA,GAAT;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD,SAND,CADP,gBAQK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF,eAqBE;AAAA,gBACGhB,QAAQ,CAACe,GAAT,CAAa,CAACE,GAAD,EAAMC,KAAN,kBACZ;AAAA,kBACCL,MAAM,CAACC,IAAP,CAAYG,GAAZ,EAAiBF,GAAjB,CAAsBC,GAAD,IAAS;AAC7B,8BACE;AAAA,sBACGA;AADH,aAASA,GAAT;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD,SANA;AADD;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CApDD;;GAAMjB,S;;KAAAA,S;AAsDN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nconst Converter = () => {\n  const [response, setResponse] = useState([]);\n  \n\n  const fetchConversions = async (value) => {\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${value}&vs_currencies=btc,eth,ltc,xrp`);\n      const json = await response.json();\n      setResponse(json);\n      console.log(json);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return(\n    <div>\n      <ul>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Bitcoin</li>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Ethereum</li>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Litecoin</li>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Ripple</li>\n      </ul>\n\n      <thead>\n        <tr>\n        {response.length > 0 ? (\n                Object.keys(response[0]).map((key) => {\n                  return (\n                    <th key={key}>\n                      <h3>{key}</h3>\n                    </th>\n                  )\n                })\n            ):<td>No Results</td>}\n        </tr>\n      </thead>\n      <tbody>\n        {response.map((val, index) => (\n          <tr>\n          {Object.keys(val).map((key) => {\n            return (\n              <td key={key}>\n                {key}\n              </td>\n            )\n          })}\n        </tr>\n        ))}\n      </tbody>\n    </div>\n  )\n}\n\nexport default Converter"]},"metadata":{},"sourceType":"module"}