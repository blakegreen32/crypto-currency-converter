{"ast":null,"code":"var _jsxFileName = \"/Users/blakegreen/Desktop/currency-converter/currency-converter-app/src/components/Converter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Converter = () => {\n  _s();\n\n  const [currency, setCurrency] = useState(\"\");\n  const [parsedResults, setParsedResults] = useState([]);\n\n  const fetchConversions = async value => {\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${value}&vs_currencies=btc,eth,ltc,xrp`);\n      const json = await response.json();\n      parseData(json);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const parseData = obj => {\n    const clonedArray = [...parsedResults];\n    const baseCurrency = Object.keys(obj)[0];\n    const conversions = obj[baseCurrency];\n    const keys = Object.keys(conversions);\n    keys.forEach(key => {\n      clonedArray.push(key + \": \" + conversions[key]);\n    });\n    setCurrency(baseCurrency);\n    setParsedResults(clonedArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Bitcoin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Ethereum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Litecoin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: e => fetchConversions(e.target.innerText),\n        children: \"Ripple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: parsedResults.length > 0 ? parsedResults.map((val, index) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: val\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select a currency\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Converter, \"MONZ6HexPvLI1kyX6Z7KY1yDD0U=\");\n\n_c = Converter;\nexport default Converter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"sources":["/Users/blakegreen/Desktop/currency-converter/currency-converter-app/src/components/Converter.js"],"names":["React","useState","useEffect","Converter","currency","setCurrency","parsedResults","setParsedResults","fetchConversions","value","response","fetch","json","parseData","err","console","log","obj","clonedArray","baseCurrency","Object","keys","conversions","forEach","key","push","e","target","innerText","length","map","val","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;;AAGA,QAAMO,gBAAgB,GAAG,MAAOC,KAAP,IAAiB;AACxC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qDAAoDF,KAAM,gCAA5D,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACAC,MAAAA,SAAS,CAACD,IAAD,CAAT;AACD,KAJD,CAIE,OAAOE,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAED;AACF,GATD;;AAWA,QAAMD,SAAS,GAAII,GAAD,IAAS;AACzB,UAAMC,WAAW,GAAG,CAAC,GAAGZ,aAAJ,CAApB;AACA,UAAMa,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiB,CAAjB,CAArB;AACA,UAAMK,WAAW,GAAGL,GAAG,CAACE,YAAD,CAAvB;AACA,UAAME,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYC,WAAZ,CAAb;AAEAD,IAAAA,IAAI,CAACE,OAAL,CAAaC,GAAG,IAAI;AAClBN,MAAAA,WAAW,CAACO,IAAZ,CAAiBD,GAAG,GAAG,IAAN,GAAaF,WAAW,CAACE,GAAD,CAAzC;AACD,KAFD;AAGAnB,IAAAA,WAAW,CAACc,YAAD,CAAX;AACAZ,IAAAA,gBAAgB,CAACW,WAAD,CAAhB;AACD,GAXD;;AAaA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAI,QAAA,OAAO,EAAGQ,CAAD,IAAOlB,gBAAgB,CAACkB,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,OAAO,EAAGF,CAAD,IAAOlB,gBAAgB,CAACkB,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAI,QAAA,OAAO,EAAGF,CAAD,IAAOlB,gBAAgB,CAACkB,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAI,QAAA,OAAO,EAAGF,CAAD,IAAOlB,gBAAgB,CAACkB,CAAC,CAACC,MAAF,CAASC,SAAV,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAA,gBAAMxB;AAAN;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA,gBAEIE,aAAa,CAACuB,MAAd,GAAuB,CAAvB,GAA4BvB,aAAa,CAACwB,GAAd,CAAkB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5D,4BAAQ;AAAA,oBAAgBD;AAAhB,WAAQC,KAAR;AAAA;AAAA;AAAA;AAAA,gBAAR;AACD,OAF2B,CAA5B,gBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAhDD;;GAAM7B,S;;KAAAA,S;AAkDN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nconst Converter = () => {\n  const [currency, setCurrency] = useState(\"\");\n  const [parsedResults, setParsedResults] = useState([]);\n  \n\n  const fetchConversions = async (value) => {\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${value}&vs_currencies=btc,eth,ltc,xrp`);\n      const json = await response.json()\n      parseData(json)\n    } catch (err) {\n      console.log(err)\n      \n    }\n  };\n\n  const parseData = (obj) => {\n    const clonedArray = [...parsedResults];\n    const baseCurrency = Object.keys(obj)[0]\n    const conversions = obj[baseCurrency]\n    const keys = Object.keys(conversions)\n\n    keys.forEach(key => {\n      clonedArray.push(key + \": \" + conversions[key])\n    })\n    setCurrency(baseCurrency)\n    setParsedResults(clonedArray)\n  }\n\n  return(\n    <div>\n      <ul>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Bitcoin</li>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Ethereum</li>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Litecoin</li>\n        <li onClick={(e) => fetchConversions(e.target.innerText)}>Ripple</li>\n      </ul>\n\n      <div>{currency}</div>\n      <div>\n        {\n          parsedResults.length > 0 ? (parsedResults.map((val, index) => {\n            return (<p key={index}>{val}</p>)\n          })):<div>Select a currency</div>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Converter"]},"metadata":{},"sourceType":"module"}